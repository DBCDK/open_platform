<?php

/** Implements hook_formID_alter
 *
 * Adds settings for Open Platform client
 *
 * @see ting_client_admin_webservices_settings
 * in ting_client.admin.inc
 *
 * @param $form
 * @param $form_state
 */
function open_platform_client_form_ting_client_admin_webservices_settings_alter(&$form, &$form_state) {
  $form['openPlatform'] = array(
    '#type' => 'fieldset',
    '#title' => 'Open Platform settings',
    '#description' => t('The Open Platform service is an abstraction layer for DBC webservices.'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
    '#tree' => FALSE,
  );
  $form['openPlatform']['openplatform_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Open Platform URL'),
    '#description' => t('URL to openPlatform webservice'),
    '#required' => TRUE,
    '#default_value' => variable_get('openplatform_url', ''),
  );
  $form['openPlatform']['openplatform_recommender_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Open Platform recommender URL'),
    '#description' => t('URL to openPlatform recommender'),
    '#required' => TRUE,
    '#default_value' => variable_get('openplatform_recommender_url', ''),
  );
  $form['openPlatform']['openplatform_token_url'] = array(
    '#type' => 'textfield',
    '#title' => t('Open Platform token URL'),
    '#description' => t('URL to openPlatform tokens'),
    '#required' => TRUE,
    '#default_value' => variable_get('openplatform_token_url', ''),
  );
  $form['openPlatform']['openplatform_client_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Open Platform client ID'),
    '#required' => TRUE,
    '#default_value' => variable_get('openplatform_client_id', ''),
  );
  $form['openPlatform']['openplatform_client_secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Open Platform client secret'),
    '#required' => TRUE,
    '#default_value' => variable_get('openplatform_client_secret', ''),
  );
}


/**
 * Implements hook_ting_client_webservice (@see ting_client.module)
 * */
function open_platform_client_ting_client_webservice() {
  // We're doing each OpenPlatform method as extensions of OpenPlatformRequest,
  // so it, and each request, need an url & class value.
  $ret = array();
  $ret['openPlatform']['class'] = 'OpenPlatformRequest';
  $ret['openPlatform']['url'] = 'openplatform_url';
  $ret['openPlatformRecommender']['class'] = 'OpenPlatformRecommenderRequest';
  $ret['openPlatformRecommender']['url'] = 'openplatform_recommender_url';
  $ret['openPlatformToken']['class'] = 'OpenPlatformTokenRequest';
  $ret['openPlatformToken']['url'] = 'openplatform_token_url';
  $ret['openPlatformSuggest']['class'] = 'OpenPlatformSuggestRequest';
  $ret['openPlatformSuggest']['url'] = 'OpenPlatformSuggestRequest_url';
  return $ret;
}


/** Generic request function to call Open Platform
 * @param $method
 * @param $params
 * @return stdClass
 */
function open_platform_client_request($method, $params, $retry = TRUE) {
  $request = 'openPlatform' . ucfirst($method);
  $response = NULL;
  $params['action'] = $method . 'Request';
  $params['requestParameters']['access_token'] = variable_get('open_platform_client_access_token', NULL);
  $params['curlOptions'] = array(
    CURLOPT_POST => TRUE,
    CURLOPT_POSTFIELDS => json_encode($params['requestParameters']),
    CURLOPT_HTTPHEADER => array(
      'Content-type: application/json',
      'Accept: application/json'
    )
  );
  try {
    $client = new ting_client_class();
    $response = $client->do_request($request, $params);

    $error = $client->getError();
    if ($error || isset($response['error'])) {
      if ($retry && (strpos($response['errorMessage'], 'invalid_token') !== false || $error['code'] !== 200)) {
        open_platform_client_authenticate_request();
        return open_platform_client_request($method, $params, FALSE);
      }
    }
    $response = open_platform_client_parse_response($method, $response);
  } catch (Exception $e) {
    watchdog('open_platform_client_authenticate', $e->getMessage(), array(), WATCHDOG_CRITICAL, NULL);
    return NULL;
  }
  return $response;
}

/**
 * Implements hook_requirements
 * (to get a status on the status report page)
 */
function open_platform_client_requirements($phase) {
  if ($phase === 'runtime') {
    $requirements = array();
    if (!(variable_get('open_platform_client_access_token', NULL))) {
      $requirements['open_platform'] = array(
        'title' => 'Open platform',
        'value' => 'no access token aquired - run cron to get one',
        'severity' => REQUIREMENT_ERROR,
      );
    }
    return $requirements;
  }
}


/** Generic parse function for Open Platform response.
 * @param $method
 * @response $params
 * @return stdClass|array
 * @throws Exception
 */
function open_platform_client_parse_response($method = NULL, $response = NULL) {
  if (!$response) {
    throw new Exception("Failed to get token: " . print_r($response, 1));
  }

  switch ($method) {
    case 'suggest' :
      break;
    case 'recommender' :
      $response = json_decode($response);
      $response = (!empty($response->data)) ? $response->data : array();
      break;
    case 'authenticate' :
      if(is_string($response)) {
        $response = json_decode($response);
      }
      $response = (!empty($response->access_token)) ? $response->access_token : NULL;
      if (!$response) {
        throw new Exception("Empty Open Platform access token: " . print_r($response, 1));
      }
      break;
  }
  return $response;
}

/**
 * Execute Open Platform recommender request
 * @param array $requestParameters
 * @return array
 */
function open_platform_client_recommender_request($requestParameters = array()) {
  /* full parameters example
  $params['requestParameters'] = array(
    'fields' => array ('string'), // returned fields, ie. array('pid','val','from')
    'pretty' => true,
    'timings' => true,
    'like' => array ('string'), // like pids, ie. array('870970-basis:12345678')
    'ignore' => array ('string'), // not like pids, ie. array('870970-basis:98765432')
    'limit' => 10,
    'offset' => 0,
    'filters' => (object) array(
      'authorFlood' => 0,
      'subject' => array('string'),
      'type' => array('string'),
      'language' => array('string'),
      'newerThan' => 0,
      'olderThan' => 0,
    ),
    'boosters' => (object) array(
      'loanCount' => 0,
    )
  ); */

  $params['requestParameters'] = $requestParameters;

  return open_platform_client_request('recommender', $params);
}


/** Open Platform authenticate
 *
 * @return string
 */
function open_platform_client_authenticate_request() {
  $params['action'] = 'authenticateRequest';

  // pjo : bug. on dringo http_build_query add an extra 'amp' which makes
  // the request fail. - simple us a string
  /* $params['requestParameters'] = array(
     'grant_type' => 'password',
     'username' => '@',
     'password' => '@',
  ); */
  $params['curlOptions'] = array(
    CURLOPT_POST => TRUE,
    CURLOPT_USERPWD => variable_get('openplatform_client_id', NULL) . ':' . variable_get('openplatform_client_secret', NULL),
    CURLOPT_POSTFIELDS => 'grant_type=password&username=@&password=@',
    CURLOPT_HTTPHEADER => array(
      'Content-type: application/x-www-form-urlencoded',
      'Accept: application/json'
    ),
  );
  $response = NULL;
  try {
    $client = new ting_client_class();
    $response = $client->do_request('openPlatformToken', $params);
    if (!$response) {
      watchdog('open_platform', 'Could not authenticate @params', array('@params' => print_r($params)), WATCHDOG_ERROR);
    }
    $response = open_platform_client_parse_response('authenticate', $response);
  } catch (Exception $e) {
    watchdog('open_platform', $e->getMessage(), array(), WATCHDOG_CRITICAL, NULL);
    // rethrow
    throw $e;
  }

  variable_set('open_platform_client_access_token', $response);
  return $response;
}

/**
 * Implements hook_cron
 *
 * Get/update access token for Open Platform.
 * Token expires in a month, so if we renew it with cron, it should never be expired.
 */
function open_platform_client_cron() {
  open_platform_client_authenticate_request();
}
